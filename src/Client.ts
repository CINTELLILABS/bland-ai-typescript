/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import * as BlandAI from "./api/index";
import * as serializers from "./serialization/index";
import urlJoin from "url-join";
import * as errors from "./errors/index";
import { Batches } from "./api/resources/batches/client/Client";
import { Calls } from "./api/resources/calls/client/Client";
import { InboundNumbers } from "./api/resources/inboundNumbers/client/Client";
import { OutboundNumbers } from "./api/resources/outboundNumbers/client/Client";
import { Sms } from "./api/resources/sms/client/Client";
import { Voices } from "./api/resources/voices/client/Client";
import { WebAgents } from "./api/resources/webAgents/client/Client";

export declare namespace BlandAIClient {
    interface Options {
        environment?: core.Supplier<environments.BlandAIEnvironment | string>;
        apiKey: core.Supplier<string>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}

export class BlandAIClient {
    constructor(protected readonly _options: BlandAIClient.Options) {}

    /**
     * Send an AI phone call with a custom objective and actions.
     *
     * @param {BlandAI.SendCall} request
     * @param {BlandAIClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BlandAI.ServerError}
     * @throws {@link BlandAI.UnauthorizedError}
     *
     * @example
     *     await blandAi.call({
     *         phoneNumber: "29382721828",
     *         task: "Would love for you to check out our AI API!",
     *         temperature: 0.5,
     *         transferList: {
     *             "default": "+1234567890",
     *             "sales": "+1234567890",
     *             "support": "+1234567890",
     *             "billing": "+1234567890"
     *         },
     *         model: BlandAI.ModelEnum.Enhanced,
     *         pronunciationGuide: [{
     *                 word: "API",
     *                 pronunciation: "A P I"
     *             }, {
     *                 word: "AI",
     *                 pronunciation: "A I"
     *             }]
     *     })
     */
    public async call(
        request: BlandAI.SendCall,
        requestOptions?: BlandAIClient.RequestOptions
    ): Promise<BlandAI.SendCallResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.BlandAIEnvironment.Production,
                "/v1/calls"
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "bland-ai",
                "X-Fern-SDK-Version": "0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            body: await serializers.SendCall.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.SendCallResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 500:
                    throw new BlandAI.ServerError(
                        await serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new BlandAI.UnauthorizedError(
                        await serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.BlandAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BlandAIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BlandAITimeoutError();
            case "unknown":
                throw new errors.BlandAIError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected _batches: Batches | undefined;

    public get batches(): Batches {
        return (this._batches ??= new Batches(this._options));
    }

    protected _calls: Calls | undefined;

    public get calls(): Calls {
        return (this._calls ??= new Calls(this._options));
    }

    protected _inboundNumbers: InboundNumbers | undefined;

    public get inboundNumbers(): InboundNumbers {
        return (this._inboundNumbers ??= new InboundNumbers(this._options));
    }

    protected _outboundNumbers: OutboundNumbers | undefined;

    public get outboundNumbers(): OutboundNumbers {
        return (this._outboundNumbers ??= new OutboundNumbers(this._options));
    }

    protected _sms: Sms | undefined;

    public get sms(): Sms {
        return (this._sms ??= new Sms(this._options));
    }

    protected _voices: Voices | undefined;

    public get voices(): Voices {
        return (this._voices ??= new Voices(this._options));
    }

    protected _webAgents: WebAgents | undefined;

    public get webAgents(): WebAgents {
        return (this._webAgents ??= new WebAgents(this._options));
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["BLAND_API_KEY"];
        return { authorization: apiKeyValue };
    }
}
