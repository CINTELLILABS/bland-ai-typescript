/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as BlandAI from "../../../index";

/**
 * @example
 *     {
 *         phoneNumber: "29382721828",
 *         task: "Would love for you to check out our AI API!",
 *         basePrompt: "You are calling a business to renew their subscription to a service before it expires on a date.",
 *         callData: [{
 *                 phoneNumber: "1234567890",
 *                 business: "ABC Corp",
 *                 service: "Netflix",
 *                 date: "September 4th"
 *             }, {
 *                 phoneNumber: "32176540987",
 *                 business: "XYZ inc.",
 *                 service: "Window Cleaning",
 *                 date: "December 20th"
 *             }],
 *         label: "Subscription Renewal",
 *         campaignId: "1234",
 *         testMode: true
 *     }
 */
export interface SendBatchRequest extends BlandAI.SendCall {
    /**
     * This is the prompt or task used for all the phone calls in the request.
     *
     * Information can be inserted into it surrounding variable names with double curly braces.
     */
    basePrompt: string;
    /**
     * Define a list of calls to make and their properties.
     *
     * Each call in call_data **MUST** have a `phone_number` property. Properties are case-sensitive.
     */
    callData: BlandAI.BatchCallData[];
    /** Adds a user-friendly label to your batch to keep track of it's original intention. This can help differentiate multiple call batches that are part of the same Campaign. Shown when a batch is retreived. */
    label?: string;
    /** Use `campaign_id` to organize related batches together. This can be set manually or auto-generated through Campaigns. */
    campaignId?: string;
    /**
     * When this is set to `true`, only the first call of `call_data` will be dispatched. A common use case is to set the first `phone_number` value to your own to confirm everything's set up properly.
     *
     * Includes additional information in the response when true so that it's easier to find any issues.
     *
     * If no value is provided, `test_mode` defaults to `false`.
     */
    testMode?: boolean;
}
