/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as BlandAI from "../../../../api/index";
import * as core from "../../../../core";
import { QueueStatus } from "./QueueStatus";
import { CallLength } from "./CallLength";

export const AnalysisObject: core.serialization.ObjectSchema<serializers.AnalysisObject.Raw, BlandAI.AnalysisObject> =
    core.serialization.object({
        totalCalls: core.serialization.property("total_calls", core.serialization.number()),
        completedCalls: core.serialization.property("completed_calls", core.serialization.number()),
        inProgressCalls: core.serialization.property("in_progress_calls", core.serialization.number()),
        queueStatuses: core.serialization.property("queue_statuses", QueueStatus),
        callLengths: core.serialization.property("call_lengths", CallLength),
        callIds: core.serialization.property("call_ids", core.serialization.list(core.serialization.string())),
        errorMessages: core.serialization.property(
            "error_messages",
            core.serialization.list(core.serialization.string())
        ),
        endpoints: core.serialization.record(core.serialization.string(), core.serialization.string()),
    });

export declare namespace AnalysisObject {
    interface Raw {
        total_calls: number;
        completed_calls: number;
        in_progress_calls: number;
        queue_statuses: QueueStatus.Raw;
        call_lengths: CallLength.Raw;
        call_ids: string[];
        error_messages: string[];
        endpoints: Record<string, string>;
    }
}
