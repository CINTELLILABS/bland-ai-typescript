/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as BlandAI from "../../../../api/index";
import * as core from "../../../../core";
import { Transcript } from "./Transcript";
import { AnsweredByEnum } from "./AnsweredByEnum";

export const CallDetailsResponse: core.serialization.ObjectSchema<
    serializers.CallDetailsResponse.Raw,
    BlandAI.CallDetailsResponse
> = core.serialization.object({
    transcripts: core.serialization.list(Transcript),
    variables: core.serialization.record(core.serialization.string(), core.serialization.string()),
    concatenatedTranscript: core.serialization.property("concatenated_transcript", core.serialization.string()),
    to: core.serialization.string(),
    from: core.serialization.string(),
    batchId: core.serialization.property("batch_id", core.serialization.string()),
    requestData: core.serialization.property(
        "request_data",
        core.serialization.record(core.serialization.string(), core.serialization.string())
    ),
    completed: core.serialization.boolean(),
    queueStatus: core.serialization.property("queue_status", core.serialization.string()),
    errorMessage: core.serialization.property("error_message", core.serialization.string()),
    answeredBy: core.serialization.property("answered_by", AnsweredByEnum),
    endpointUrl: core.serialization.property("endpoint_url", core.serialization.string()),
    maxDuration: core.serialization.property("max_duration", core.serialization.number()),
    correctedDuration: core.serialization.property("corrected_duration", core.serialization.number()),
    callLength: core.serialization.property("call_length", core.serialization.number()),
    createdAt: core.serialization.property("created_at", core.serialization.date()),
});

export declare namespace CallDetailsResponse {
    interface Raw {
        transcripts: Transcript.Raw[];
        variables: Record<string, string>;
        concatenated_transcript: string;
        to: string;
        from: string;
        batch_id: string;
        request_data: Record<string, string>;
        completed: boolean;
        queue_status: string;
        error_message: string;
        answered_by: AnsweredByEnum.Raw;
        endpoint_url: string;
        max_duration: number;
        corrected_duration: number;
        call_length: number;
        created_at: string;
    }
}
